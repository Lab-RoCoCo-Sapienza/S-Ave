<?xml version="1.0"?>
<launch>

  <arg name="world_name" default="prof_office" />
  <arg name="world" default="$(find semantic_maps)/worlds/prof_office.world" />
  <arg name="launch_complete_pipeline" default="false" />
  <!--<arg name="world" default="worlds/empty_world" />-->

  <!-- Launch the empty world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find semantic_maps)/worlds/$(arg world_name).world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="recording" value="false"/>
    <arg name="debug" value="false"/>
  </include>


  <!-- push robot_description to factory and spawn robot in gazebo lucrezio.urdf.xacro-->
  <arg name="model" default="$(find semantic_maps)/urdf/new_robot.urdf.xacro"/>
  <param name="robot_description" command="$(find xacro)/xacro.py $(arg model)" />
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        args="-z 1.0 -unpause -urdf -model robot -param robot_description" respawn="false" output="screen" />

  <node pkg="tf" type="static_transform_publisher" name="camera_link_broadcaster" args="0 0 0 -0.5 0.5 -0.5 0.5 /camera_link /camera_depth_optical_frame 20" />
  
  <node pkg="tf" type="static_transform_publisher" name="base_footprint_broadcaster" args="0 0 0.1 0.0 0.0 0.0 1.0 /base_footprint /base_link 20" />


  <!-- start state publishers -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher" />
 <!--<param name="publish_frequency" type="double" value="30.0" />-->


  <!-- Run the controller manager -->
    <rosparam file="$(find semantic_maps)/config/diffdrive.yaml" command="load" ns="lucrezio" />

  <node name="lucrezio_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="lucrezio" />  


 <group if="$(arg launch_complete_pipeline)">
  <include file="$(find semantic_maps)/launch/yolov5l.launch"/>
  <include file="$(find semantic_maps)/launch/evaluation.launch">
    <arg name="world_name" value="$(arg world_name)"/>
  </include>
  <node name="spatial_knowledge_node" pkg="semantic_maps" type="spatial_knowledge_node"/>
<!--  <node name="teleop" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" args="cmd:=/lucrezio/cmd_vel" />-->
 </group>  

</launch>
